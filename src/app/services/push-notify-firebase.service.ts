import { Injectable } from '@angular/core';
import { FirebaseMessaging } from '@capacitor-firebase/messaging';
import { ToastController } from '@ionic/angular';

@Injectable({
  providedIn: 'root',
})
export class PushService {
  constructor(private toastController: ToastController) {}

  checkPermissions = async () => {
    const result = await FirebaseMessaging.checkPermissions();
    return result.receive;
  };

  requestPermissions = async () => {
    const result = await FirebaseMessaging.requestPermissions();
    return result.receive;
  };

  getToken = async () => {
    const result = await FirebaseMessaging.getToken();
    return result.token;
  };

  deleteToken = async () => {
    await FirebaseMessaging.deleteToken();
  };

  getDeliveredNotifications = async () => {
    const result = await FirebaseMessaging.getDeliveredNotifications();
    return result.notifications;
  };

  // removeDeliveredNotifications = async () => {
  //   await FirebaseMessaging.removeDeliveredNotifications({
  //     ids: ['798dfhliblqew89pzads'],
  //   });
  // };

  removeAllDeliveredNotifications = async () => {
    await FirebaseMessaging.removeAllDeliveredNotifications();
  };

  subscribeToTopic = async () => {
    await FirebaseMessaging.subscribeToTopic({ topic: 'news' });
  };

  unsubscribeFromTopic = async () => {
    await FirebaseMessaging.unsubscribeFromTopic({ topic: 'news' });
  };

  addTokenReceivedListener = async () => {
    await FirebaseMessaging.addListener('tokenReceived', (event) => {
      console.log('tokenReceived', { event });
    });
  };

  addNotificationReceivedListener = async () => {
    await FirebaseMessaging.addListener('notificationReceived', (event) => {
      console.log('notificationReceived', { event });
      const { notification } = event;
      this.toastController
        .create({
          message: notification.title,
          duration: 3000,
        })
        .then((toast) => {
          toast.present();
        });
    });
  };
  /*{
    "event": {
        "notification": {
            "id": "0:1698343809994904%b8a918b7b8a918b7",
            "data": {
                "background": "true",
                "key": "valuee"
            },
            "title": "foreground",
            "body": "Test notify",
            "tag": "campaign_collapse_key_6743855655285372967"
        }
    }
}*/

  addNotificationActionPerformedListener = async () => {
    await FirebaseMessaging.addListener(
      'notificationActionPerformed',
      (event) => {
        console.log('notificationActionPerformed', { event });
      }
    );
  };
  /*{
    "event": {
        "actionId": "tap",
        "notification": {
            "id": "0:1698343680700139%b8a918b7b8a918b7",
            "data": {
                "google.delivered_priority": "high",
                "google.sent_time": 1698343680664,
                "google.ttl": 86400,
                "google.original_priority": "high",
                "background": "true",
                "key": "valuee",
                "from": "863478011625",
                "gcm.n.analytics_data": "Bundle[mParcelledData.dataSize=372]",
                "collapse_key": "io.ionic.jalzdelez.test0"
            }
        }
    }
}*/


  removeAllListeners = async () => {
    await FirebaseMessaging.removeAllListeners();
  };

  /* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

  initialSettings = async () => {
    await this.addTokenReceivedListener();
    await this.addNotificationReceivedListener();
    await this.addNotificationActionPerformedListener();
  };

  saveToken = async () => {
    const token = await this.getToken();
    console.log('token', token);
  };
}

// Generated by https://quicktype.io

export interface Push {
  notification: Notification;
}

export interface Notification {
  id: string;
  data: Data;
  title: string;
  body: string;
  tag: string;
}

export interface Data {
  background: string;
  key: string;
}
